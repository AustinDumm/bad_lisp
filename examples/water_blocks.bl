(dyn-let (load "./library/lib.bl")
    (let* (
        (find-max-pair (lambda (blocks-list)
                            (let* ((enumed-max-pair
                                        (reduce (lambda (enumed-elt enumed-pair)
                                            (let ((first-val (pick 1 (first enumed-pair)))
                                                  (second-val (pick 1 (rest enumed-pair)))
                                                  (cur-val (pick 1 enumed-elt)))
                                                 (cond (((> cur-val first-val) `(,enumed-elt . ,(first enumed-pair)))
                                                        ((> cur-val second-val) `(,(first enumed-pair) . ,enumed-elt))
                                                        (#t enumed-pair))))) (enumerated blocks-list) '((0 -1000) . (1 -1000))))
                                   (greatest-val-index (pick 0 (first enumed-max-pair)))
                                   (second-val-index (pick 0 (rest enumed-max-pair))))
                                  (if (< greatest-val-index second-val-index)
                                        `(,greatest-val-index . ,second-val-index)
                                        `(,second-val-index . ,greatest-val-index)))))
        (water-between-indeces (lambda (left right blocks-list)
                                        (let ((limit (if (< (pick left blocks-list) (pick right blocks-list)) (pick left blocks-list) (pick right blocks-list))))
                                            (reduce (lambda (height acc)
                                                        (+ acc (- limit height)))
                                                    (drop (+ 1 left) (take right blocks-list))
                                                    0))))
        (water-in-blocks (Y (lambda (f)
                            (lambda (blocks-list)
                                (if (<= (count blocks-list) 2)
                                    0
                                    (let* ((max-pair (find-max-pair blocks-list))
                                           (max-left (first max-pair))
                                           (max-right (rest max-pair))
                                           (water-between-max-pair (water-between-indeces max-left max-right blocks-list)))
                                          (+ water-between-max-pair (f (append (take max-left blocks-list) (drop max-right blocks-list)))))))))))
            `((water-in-blocks ,water-in-blocks))))
