(dyn-let (load "./library/lib.bl")
        (let ((structure-match (Y (lambda (f)
                                (lambda (first-expr second-expr)
                                    (let ((first-elt (first first-expr))
                                          (first-rest (rest first-expr))
                                          (second-elt (first second-expr))
                                          (second-rest (rest second-expr)))
                                         (cond (((and (and (nil? first-rest) (nil? second-rest))
                                                      (and (list? first-elt) (list? second-elt)))
                                                    (f first-elt second-elt))
                                                ((and (list? first-elt) (list? second-elt))
                                                    (and (f first-elt second-elt)
                                                         (f first-rest second-rest)))
                                                ((and (nil? first-rest) (nil? second-rest))
                                                    (= first-elt second-elt))
                                                ((not (= first-elt second-elt))
                                                    #f)
                                                (#t
                                                    (f first-rest second-rest)))
                                         )))))))
            `((structure-match ,structure-match))
        )
)

