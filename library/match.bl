(dyn-let (load "./library/gen.bl")
    (dyn-let (load "./library/lib.bl")
            (let* ((is-unquoted (lambda (elt)
                                    (and (and (list? elt) (= (first elt) 'unquote)) (and (list? (rest elt)) (nil? (rest (rest elt)))))))
                   (get-quoted-elt (lambda (elt)
                                    (first (rest elt))))
                   (structure-match (Y (lambda (f)
                                        (lambda (first-expr second-expr matched-pairs)
                                            (cond (((and (nil? first-expr) (nil? second-expr))
                                                        `(,#t ,matched-pairs))
                                                   ((or (nil? first-expr) (nil? second-expr))
                                                        `(,#f ()))
                                                   ((and (list? first-expr) (list? second-expr))
                                                        (let ((first-elt (first first-expr))
                                                              (first-rest (rest first-expr))
                                                              (second-elt (first second-expr))
                                                              (second-rest (rest second-expr)))
                                                             (cond (((is-unquoted first-elt) 
                                                                        (f first-rest second-rest (cons `(,(get-quoted-elt first-elt) ,second-elt) matched-pairs)))
                                                                    ((and (list? first-elt) (list? second-elt))
                                                                        (let* ((elt-result (f first-elt second-elt matched-pairs))
                                                                               (elt-success (first elt-result))
                                                                               (elt-pairs (first (rest elt-result))))
                                                                            (if elt-success
                                                                                (f first-rest second-rest elt-pairs)
                                                                                `(,#f ()))))
                                                                    ((and (nil? first-rest) (nil? second-rest))
                                                                        `(,(= first-elt second-elt) ,matched-pairs))
                                                                    ((not (= first-elt second-elt))
                                                                        '(#f ()))
                                                                    (#t
                                                                        (f first-rest second-rest matched-pairs)))
                                                             )))
                                                   ((= first-expr second-expr)
                                                        `(,#t ,matched-pairs)))))))))
                `((structure-match ,structure-match))
            )
    )
)

