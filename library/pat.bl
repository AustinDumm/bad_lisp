(quote ((match-to-pattern (lambda (pattern values)
                            (dyn-let (load "./library/fnc.bl")
                                (dyn-let (load "./library/mac.bl")
                                    (let ((result (((lambda (x) (x x))
                                                (lambda (rec)
                                                    (lambda (pattern values)
                                                        (cond (
                                                               ((symbol? pattern)
                                                                    (list (list pattern values)))
                                                               ((and (and (list? pattern) (list? values)) (= (count pattern) (count values)))
                                                                    (reduce 
                                                                        (zip pattern values) 
                                                                        (lambda (pair acc) 
                                                                            (let ((matched ((rec rec) (first pair) (first (rest pair)))))
                                                                                (cond (((nil? matched) acc)
                                                                                       (#t (append acc matched))))))
                                                                        ()))
                                                               ((= pattern values) ())
                                                               (#t (list #f))))))) pattern values)))
                                        (if (any-satisfy result (lambda (x) (= #f x)))
                                            #f
                                            (filter result (lambda (x) (not (= #f x))))))))))))
