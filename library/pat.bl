(quote ((match-to-pattern ((lambda (x) (x x))
                            (dyn-let (load "./library/fnc.bl")
                                (dyn-let (load "./library/mac.bl")
                                    (lambda (rec)
                                        (lambda (pattern values)
                                            (let ((matched-all (cond (((symbol? pattern)
                                                                            (list (list pattern values)))
                                                                       ((and (and (list? pattern) (list? values)) (= (count pattern) (count values)))
                                                                            (reduce 
                                                                                (zip pattern values) 
                                                                                (lambda (pair acc) 
                                                                                    (let ((matched ((rec rec) (first pair) (first (rest pair)))))
                                                                                        (if (nil? matched)
                                                                                            (cons () acc)
                                                                                            (append acc matched))))
                                                                                ()))
                                                                       (#t (quote (())))))))
                                                 (if (any-satisfy matched-all (lambda (x) (nil? x)))
                                                     ()
                                                     matched-all))))))))))
